# -*- coding: utf-8 -*-
"""Crash Course on Python: Module 6 project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OSChpkvbx7hBYSLA-xLwkC4wEG6KYMTl
"""

def get_event_date(event):
  """
  A function to get the dates of each event
  """
  return event.event_date

def current_users(events):
  #Sorting the list of events by the results
  #of the above date-getting function
  events.sort(key=get_event_date)
  #Initialising our results dictionary
  logged_in={}
  #Looping over the list of events to either
  #add each machine to the results dictionary as a key
  #or to modify it by adding/removing users as results values
  for event in events:
    if event.machine_name not in logged_in:
      logged_in[event.machine_name]=set()
    if event.event_type == "login":
      logged_in[event.machine_name].add(event.user)
    elif event.event_type=="logout":
      logged_in[event.machine_name].remove(event.user)
  return logged_in

def generate_report(logged_in):
  #Looping through the keys and values of our results dictionary
  for machine, user in logged_in.items():
    #Ensuring we don't include machines with 0 active users in our report
    #by filtering them out
    if len(user)>0:
      #Creating a list of active users and adding each user in the results set
      user_list= ",".join(user)
      #Formatting the report
      print("{}: {}".format(machine, user_list))

#Creating the event class and its attributes
class Event:
  def __init__(self, event_date, event_type, machine_name, user):
    self.event_date=event_date
    self.event_type=event_type
    self.machine_name=machine_name
    self.user=user

#A list of sample events to test our code
events = [
  Event('2020-01-21 12:45:46', 'login', 'myworkstation.local', 'jordan'),
  Event('2020-01-22 15:53:42', 'logout', 'webserver.local', 'jordan'),
  Event('2020-01-21 18:53:21', 'login', 'webserver.local', 'lane'),
  Event('2020-01-22 10:25:34', 'logout', 'myworkstation.local', 'jordan'),
  Event('2020-01-21 08:20:01', 'login', 'webserver.local', 'jordan'),
  Event('2020-01-23 11:24:35', 'login', 'mailserver.local', 'chris'),
]

#Calling the active user-finding function on the above sample list,
#and saving it in the 'users' variable so we can call the report function on it
users=current_users(events)
#Note that empty sets will show up as 'set()' in the results value
print(users)

#Generating the report, which filters out the empty set above
generate_report(users)
#

#Input with errors, code with fix

def get_event_date(event):
  return event.date

def current_users(events):
  events.sort(key=get_event_date)
  machines = {}
  for event in events:
    if event.machine not in machines:
      machines[event.machine] = set()
    if event.type == "login":
      machines[event.machine].add(event.user)
    elif event.type == "logout":
        if event.user in machines[event.machine]:
          machines[event.machine].remove(event.user)
  return machines

def generate_report(machines):
  for machine, users in machines.items():
    if len(users) > 0:
      user_list = ", ".join(users)
      print("{}: {}".format(machine, user_list))

class Event:
  def __init__(self, event_date, event_type, machine_name, user):
    self.date = event_date
    self.type = event_type
    self.machine = machine_name
    self.user = user

events = [
    Event('2020-01-21 12:45:56', 'login', 'myworkstation.local', 'jordan'),
    Event('2020-01-22 15:53:42', 'logout', 'webserver.local', 'jordan'),
    Event('2020-01-21 18:53:21', 'login', 'webserver.local', 'lane'),
    Event('2020-01-22 10:25:34', 'logout', 'myworkstation.local', 'jordan'),
    Event('2020-01-21 08:20:01', 'login', 'webserver.local', 'jordan'),
    Event('2020-01-23 11:24:35', 'logout', 'mailserver.local', 'chris'),
]

users = current_users(events)
generate_report(users)
